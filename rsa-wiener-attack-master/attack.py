import ContinuedFractions, Arithmetic  
import time  
import sys  
import base64  
import binascii  
import gmpy  
import sympy  
import math  
import fractions  
import struct  
sys.setrecursionlimit(100000)  
# modulus from the RSA public key  
n=0x86986548c02b2d6b0461a74a09a5ee4efa07882d5c610bdb14d1ba3044effd5570e4c509d116aca992a342cf52ed0463db6d4648a3013ba8219c3a72b1998796253dd11ecc536087e6e5bd207c1387af9df6bf875ab319556dcc0bad6a90f017459760ee7d274fe6046e7599385f7607d29ed235477695e3365fc6b9f5270183e9c4c2c118aa676c1d9cbe06864507e4310d85b8cacff9f5a3eed487b71d2d75b00943d7eda9aaf5b2bb69271625de2469d6a7c4f50c4eeac54b1605793cc0f7fe9167452ff5fef3647c9eec8866730732c05dca4c56f393ca2e61e7d76442822b9da56d96f67bba9f6095f761d0f2a3de62ea8c6fc7ac2fa7b727684947f7640711b700f40a1799d0265eefe94952b50e5e10b15bec14cc1664714c6c1ff1c16454f4a912ec19760d80c4759ff3130da43b13e7967d5cea526402cf2b566653c0cd5d7d0995357661c0308cbd11aaeb832ca9093dc3981d1fb6b62fd98a883e8d4c1548521c3e2f0bef76c7220d8093c2bdb1ae017f2e48d0defe42ce5713955ae294bec2b5da9b81cf9bb1d8ca5e5dcc9bf930edb7a3f6d2d350d2aa478e01070dbc151d6f9f6dba473ec001432de4e2ced4611955f294b3d48631dd51eb7c50a97f5165731d597129d3335f4c994234d89095335c705f075a1ba08a0f5cf383d65cd424524a48a415ce2ca5a34b4287e4efacb243e68b9c90a3679bef2757

# exponent from the RSA public key  
e=0x10001
c=0x4b28a870ae88e5f5edf97a954a1df06c6d9e2f53108ae99a014fdcce82d398cd69303e31d97da9b61b02247a890226f55dff228f714ee80c37ec00a1e4a06de4b553959bf962b6347e762306174db3d06549e374c72b5dc15ed3ca472a9ceeca38899d96a30d3b3df253b7bc7845c73a0fc3dd0401af4c7a52ddb4e17e96e6138efed17767f69145d27aa5f2ce869649765602af5f94af8d987bae0398a6fa352acd4fe9d92fd31bc9e5c75771abe06df5e27cc4f02b6c11c5637ab3143d623375824b179699f30ec842450f5e3bfcab4e71acf260ad6978c29e39f9b8a9e7b1fe1444223eac5c69f5b97825792dd37b5103aedc3afc21605afa06ef12e89e10d2c15197b4516d14ee98d2e7339b5a019414545ed117a7495426f9f822be9503490e9b4e2b53e41b74d184f3dd86c5162bb8ab803db4d8011acf87ed18f897630d55a62cc45c759ddad627ec0369d7e7bec5395921d8f515599ffdb6bfe53547a12baa27c5620dc33e00f544e3932fb9681bdbac5d699b8b30374271cfe4b59512b037a71319c74fc7e88fbec6fe437207f263abdab80a8f5542605c9218a14d6463b3994e9951da23bb0ee25a18d1857b85cdb3f225a734ae7221fce2f0d999de8f77ebe971345cf6afbc00e184bf8b79f27fb2527d4e332ac3df7e9e1753b502ef4d211ef92c4ad2f418d98d7f1c716c49bedb07bcfa8251566af3d73d478ce7c801c6089922bc3ed3ae3a099ad78cd5ea2ee35a6a9b3b71aef6905c327f432ba4a44017e969f54ee226e0b48489f9279f8b3d155a10ceb277fb327090594b4f18e4fcc8e2c328a8ec9bd090912a3aae23c6de92a49a4499ae00fd2dfc242a8e438194bd85b379665c9c409e17f96a2efa8880c56cd028d11176b94f39a573d9b67887782422d6a6fa6319290ac39bba2d558c792f0b2c50a3a1a4e58d03b8eb2cf2d212bfdec0521c1853ff3edd1cc42b374177f3d808f3ffdc3a50a9bd3c1be2b961e76d6319bbd5c3f361270d98a377f00625f51cd217590d2f3eaf70052b86cd9ced2de19102da959cf465e3d68b11ebe1d5bbb8ad1c68be7b1363b11052992a3b6b1401a2e9453b68c6870a7605a93e97efb9c881b64faebefa6fef350051cb6bb43592b36df96c50d883f20afb57eb7a40d2b9e4344031724839ee64dbe6335d5615f834c1eee1b1c9922069cfac6cabb012b197edbad62d339f92c75cb54956317fad164f7ffed9a4ccc36be3fe5023b240b12e1a21ff24c5070b4e834cbf3267b77dbb63a3fb979036ea0409a9a27cda187c130c21711c4f38ff176548cae461d635d753bcaa2a8b6fc247c356563047219a03c719c37fe08f41f9500822a6d13e6e76c32eb84b74bdf75cbc9027d63bf09811d03125b0b8d806242b779de42d9bf2572214f62b739276aa4a63b98222108b6184810d277a3c6d5a8ef4a699eb16cd9826956cb9fa01509998e4fceb29a7e36dd5efcdd4b537904740a0b5eb2f7bdff5277bf35b6bc871a0e7e078a425c57373e0f65f4778c9e6d85dadd6712a5391b4f2214ff2dcd01cd3c3a5ea775d2ac97a3b14e1dd34e68e33d2abb4bba4ac906f54fc59b1c6caffdb24cecc

def hack_RSA(e,n):  
  print "Performing Wiener's attack. Don't Laugh..."  
  time.sleep(1)  
  frac = ContinuedFractions.rational_to_contfrac(e, n)  
  convergents = ContinuedFractions.convergents_from_contfrac(frac)  
  for (k,d) in convergents:  
    #check if d is actually the key  
    if k!=0 and (e*d-1)%k == 0:  
      phi = (e*d-1)//k  
      s = n - phi + 1  
      # check if the equation x^2 - s*x + n = 0  
      # has integer roots  
      discr = s*s - 4*n  
      if(discr>=0):  
        t = Arithmetic.is_perfect_square(discr)  
        if t!=-1 and (s+t)%2==0:  
          return d  
#hacked_d = hack_RSA(e, n)  
#print "d=" + str(hacked_d)  


d=82360526616896807698693573199664438409937065969470070589061697203467920610817023646959077756968989532459091749350432099444980199654188634836861161137356662441445859352927217157270793987104238155332957760232748731947002017400746597944533389986864375329359088386551101208283522331411651732989376273218842814180319110433001694202809406529081151328224220501000292507144740713386831323918799559242796888829373272839049340208231242397384963518461448183826706394044211875954303427851825251639033541902213506905901969121366029468891668656797568632939181423824723939930127468565302483191827000307215869460583072592787394379648492838431373480501883096871724639329379422198017519406310001449118250257352155151242793946860974388275256551958325634162505006352633974367733621639608704430697868358325477517705349062070604806141047285976585695001741441171974331457858532665535006295162620342801636572553939160973573287838150248262669409134863998676177317567799700878113228884526337190956961963516058441888168118633266674943833985047193671213626257221952126625834587189721310168003199270210218744859703599407641156335251120773805978641928778006104069967130056321615203155638339974487535580497188409267435564860804781546983286452847097738671150588113
m = pow(c, d, n)  
print "So the flag is:"  
print("%0512x" %m).decode("hex") 

